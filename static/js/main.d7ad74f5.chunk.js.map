{"version":3,"sources":["constants/chains.js","constants/coins.js","ethereumFunctions.js","network.js","NavBar/MenuItems.js","NavBar/NavBar.js","CoinSwapper/CoinField.js","CoinSwapper/CoinButton.js","CoinSwapper/CoinDialog.js","Components/LoadingButton.js","Components/wrongNetwork.js","CoinSwapper/CoinSwapper.js","Liquidity/SwitchButton.js","Liquidity/LiquidityFunctions.js","Liquidity/LiquidityDeployer.js","Liquidity/RemoveLiquidity.js","Liquidity/Liquidity.js","App.js","reportWebVitals.js","index.js"],"names":["networks","ChainId","routerAddress","Map","set","COINS","chains","name","abbr","address","imageURI","ROUTER","require","ERC20","FACTORY","PAIR","ethers","providers","JsonRpcProvider","async","getNetwork","provider","chainId","getDecimals","token","decimals","then","result","catch","error","console","log","getBalanceAndSymbol","accountAddress","signer","weth_address","coins","balanceRaw","getBalance","balance","utils","formatEther","symbol","Contract","abi","tokenDecimals","balanceOf","fetchReserves","address1","address2","pair","coin1","coin2","coin1Decimals","coin2Decimals","reservesRaw","getReserves","results","token0","token1","err","factory","pairAddress","getPair","liquidityTokens_BN","liquidityTokens","Number","toPrecision","theme","createTheme","palette","primary","main","contrastText","secondary","Web3Provider","props","isConnected","setConnected","useState","network","useRef","account","chainID","router","weth","setupConnection","useCallback","window","ethereum","getSigner","request","method","getAccount","current","includes","getRouter","get","wplsAddress","WPLS","getWeth","getFactory","localStorage","setItem","useEffect","storedAccount","getItem","storedChainId","parseInt","handleAccountsChanged","accounts","length","removeItem","handleChainChanged","on","removeListener","_jsx","ThemeProvider","children","SnackbarProvider","maxSnack","_jsxs","render","onClick","style","cursor","color","textDecoration","MenuItems","title","url","cName","NavBar","Component","constructor","arguments","state","clicked","className","map","item","index","Link","to","useStyles","makeStyles","container","padding","spacing","minHeight","backgroundColor","COLORS","borderRadius","borderColor","borderWidth","borderStyle","container_input","marginLeft","textAlign","container_blank","grid","height","fab","zIndex","input","typography","h5","width","inputBase","inputBase2","RemoveLiquidityField1","classes","value","onChange","activeField","Grid","direction","justifyContent","alignItems","xs","Fab","size","variant","ExpandMoreIcon","InputBase","placeholder","disabled","root","RemoveLiquidityField2","CoinField","button","paddingTop","paddingBottom","display","coinName","opacity","coinImage","marginRight","CoinButton","coinAbbr","other","ButtonBase","focusRipple","src","alt","Typography","styles","dialogContainer","titleSection","titleText","alignSelf","hr","margin","paddingLeft","paddingRight","coinList","overflowY","coinContainer","marginTop","overflow","DialogTitle","withStyles","onClose","MuiDialogTitle","disableTypography","alignContent","IconButton","CloseIcon","DialogActions","MuiDialogActions","CoinDialog","open","others","setAddress","React","setError","exit","Dialog","undefined","fullWidth","maxWidth","paper","TextField","e","target","helperText","InputProps","InputLabelProps","coin","Button","autoFocus","submit","doesTokenExist","wrapper","position","progress","green","top","left","LoadingButton","loading","valid","success","fail","type","CircularProgress","WrongNetwork","paperContainer","border","boxShadow","transition","switchButton","marginBottom","overflowWrap","footer","CoinSwapper","enqueueSnackbar","useSnackbar","dialog1Open","setDialog1Open","dialog2Open","setDialog2Open","wrongNetworkOpen","setwrongNetworkOpen","setCoin1","setCoin2","reserves","setReserves","field1Value","setField1Value","field2Value","setField2Value","setLoading","switchFields","reverse","handleChange","field1","formatBalance","parseFloat","formatReserve","reserve","data","isNaN","amountIn","routerContract","token1Decimals","token2","token2Decimals","amount_out","getAmountsOut","parseUnits","String","getAmountOut","amount","toFixed","coinTimeout","setTimeout","clearTimeout","Container","Paper","fontFamily","SwapVerticalCircleIcon","fontSize","isButtonEnabled","parsedInput1","parsedInput2","swap","tokens","time","Math","floor","Date","now","deadline","BigNumber","from","amountInToken1","allowance","lt","approve","toString","amountOut","callStatic","tx","swapExactETHForTokens","swapExactTokensForETH","swapExactTokensForTokens","receipt","wait","message","swapTokens","autoHideDuration","LoopIcon","SwitchButton","setDeploy","changeStyles","K","document","getElementById","ButtonGroup","id","text","quote","amount1","reserve1","reserve2","quoteMintLiquidity","amountA","amountB","_reserveA","_reserveB","totalSupply","reserveA","reserveB","_totalSupply","valueA","valueB","sqrt","min","background","values","buttonIcon","LiquidityDeployer","setLiquidityTokens","liquidityOut","setLiquidityOut","oldField1Value","oldField2Value","field2","toLocaleString","minimumFractionDigits","maximumFractionDigits","NaN","amountADesired","amountBDesired","amountBOptimal","amountAOptimal","quoteAddLiquidity","networksigner","deploy","amount2","amount1min","amount2min","amountIn1","amountIn2","amount1Min","amount2Min","currentAllowance1","currentAllowance2","approvalPromises","push","Promise","all","updatedAllowance1","updatedAllowance2","gte","addLiquidityETH","addLiquidity","AccountBalanceIcon","LiquidityRemover","tokensOut","setTokensOut","parsedInput","liquidity","feeOn","feeTo","_kLast","kLast","adjustedReserveA","adjustedReserveB","feeLiquidity","quoteRemoveLiquidity","remove","liquidity_tokens","Getliquidity","approveTx","removeLiquidityETH","removeLiquidityPLS","removeLiquidity","ArrowDownwardIcon","Liquidity","deploy_or_remove","href","App","NarBar","Route","exact","path","reportWebVitals","onPerfEntry","Function","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","HashRouter","StrictMode"],"mappings":"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","file":"static/js/main.d7ad74f5.chunk.js","sourcesContent":["export const networks = [369]\n\nexport const ChainId = {\n  MAINNET: 369,\n \n};\n\nexport const routerAddress = new Map();\nrouterAddress.set(ChainId.MAINNET, \"0x2221EEa96821E537F100C711dE439F79451c6A01\");\n\n","import * as chains from './chains';\n\n// If you add coins for a new network, make sure Wpls address (for the router you are using) is the first entry\n\n\n\nconst MAINNETCoins = [\n  \n  {\n    name: \"Pulse\",\n    abbr: \"PLS\",\n    address: \"0xA1077a294dDE1B09bB078844df40758a5D0f9a27\", \n    imageURI: \"\"\n  },\n  {\n    name: \"DEX\",\n    abbr: \"DEX\",\n    address: \"0x57953dAC106a4cDa11D90273b1B9D59E169533c0\", \n    imageURI: \"\"\n  },\n  {\n    name: \"PulseX\",\n    abbr: \"PLSX\",\n    address: \"0x95B303987A60C71504D99Aa1b13B4DA07b0790ab\",\n    imageURI: \"\"\n  },\n  {\n    name: \"DAI from eth\",\n    abbr: \"DAI\",\n    address: \"0xefD766cCb38EaF1dfd701853BFCe31359239F305\",\n    imageURI: \"\"\n  },\n  {\n    name: \"HEX\",\n    abbr: \"HEX\",\n    address: \"0x2b591e99afE9f32eAA6214f7B7629768c40Eeb39\",\n    imageURI: \"\"\n  },\n  {\n    name: \"HEX BEAR\",\n    abbr: \"HXB\",\n    address: \"0x009a8670E74E1dda3E449E93A9308e5977949967\",\n    imageURI: \"\"\n  },\n  {\n    name: \"TETRA\",\n    abbr: \"TETRA\",\n    address: \"0xAeC4C07537B03E3E62fc066EC62401Aed5Fdd361\",\n    imageURI: \"\"\n  },\n  {\n    name: \"Hex Orange Address\",\n    abbr: \"HOA\",\n    address: \"0x7901a3569679AEc3501dbeC59399F327854a70fe\",\n    imageURI: \"\"\n  },\n  {\n    name: \"USDL\",\n    abbr: \"USDL\",\n    address: \"0x0dEEd1486bc52aA0d3E6f8849cEC5adD6598A162\",\n    imageURI: \"\"\n  },\n  {\n    name: \"Incentive\",\n    abbr: \"INC\",\n    address: \"0x2fa878Ab3F87CC1C9737Fc071108F904c0B0C95d\",\n    imageURI: \"\"\n  },\n  {\n  name: \"DAI Copy\",\n    abbr: \"pDAI\",\n    address: \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n    imageURI: \"\"\n  },\n  {\n    name: \"Internet Money\",\n    abbr: \"IM\",\n    address: \"0xBBcF895BFCb57d0f457D050bb806d1499436c0CE\",\n    imageURI: \"\"\n  },\n  {\n    name: \"PEPE\",\n    abbr: \"PEPE\",\n    address: \"0x6982508145454Ce325dDbE47a25d4ec3d2311933\",\n    imageURI: \"\"\n  \n  },\n  {\n    name: \"Richard's Only Brother\",\n    abbr: \"ROB\",\n    address: \"0x1c2766F5949A4aA5d4cf0439067051135ffc1b28\",\n    imageURI: \"\"\n  },\n  {\n    name: \"pBear\",\n    abbr: \"PBR\",\n    address: \"0x425AEb3Be986442A2f317156d520130ac0d25E3e\",\n    imageURI: \"\"\n  },\n  {\n    name: \"Wrapped Pulse\",\n    abbr: \"WPLS\",\n    address: \"0xA1077a294dDE1B09bB078844df40758a5D0f9a27\",\n    imageURI: \"\"\n  },\n]\n\n\nconst COINS = new Map();\nCOINS.set(chains.ChainId.MAINNET, MAINNETCoins);\n\nexport default COINS\n","import { Contract, ethers, BigNumber } from \"ethers\";\nimport * as chains from \"./constants/chains\";\nimport COINS from \"./constants/coins\";\n\n\nconst ROUTER = require(\"./build/UniswapV2Router02.json\");\nconst ERC20 = require(\"./build/ERC20.json\");\nconst FACTORY = require(\"./build/IUniswapV2Factory.json\");\nconst PAIR = require(\"./build/IUniswapV2Pair.json\");\nconst primaryProvider = new ethers.providers.JsonRpcProvider(\"https://rpc-pulsechain.g4mm4.io\");\nconst backupProvider = new ethers.providers.JsonRpcProvider(\"https://rpc.pulsechain.com\"); \n\nexport function getProvider() {\n  if (typeof window.ethereum !== \"undefined\") {\n    return new ethers.providers.Web3Provider(window.ethereum); \n  } \n  return primaryProvider || backupProvider;; \n}\nfunction getActiveProvider() {\n  return primaryProvider || backupProvider;\n}\nexport function getSigner(provider) {\n  return provider.getSigner();\n}\n\nexport async function getNetwork(provider) {\n  const network = await provider.getNetwork();\n  return network.chainId;\n}\n\nexport function getRouter(address, signer) {\n  return new Contract(address, ROUTER.abi, signer);\n}\n\nexport async function checkNetwork(provider) {\n  const chainId = getNetwork(provider);\n  if (chains.networks.includes(chainId)){\n    return true\n  }\n  return false;\n}\n\nexport function getWeth(address, signer) {\n  return new Contract(address, ERC20.abi, signer);\n}\n\nexport function getFactory(address, signer) {\n  return new Contract(address, FACTORY.abi, signer);\n}\n\nexport async function getAccount() {\n  const accounts = await window.ethereum.request({\n    method: \"eth_requestAccounts\",\n  });\n\n  return accounts[0];\n}\n\n//This function checks if a ERC20 token exists for a given address\n//    `address` - The Ethereum address to be checked\n//    `signer` - The current signer\nexport function doesTokenExist(address, signer) {\n  try {\n    return new Contract(address, ERC20.abi, signer);\n  } catch (err) {\n    return false;\n  }\n}\n\nexport async function getDecimals(token) {\n  const decimals = await token.decimals().then((result) => {\n      return result;\n    }).catch((error) => {\n      console.log('No tokenDecimals function for this token, set to 0');\n      return 0;\n    });\n    return decimals;\n}\n\n// This function returns an object with 2 fields: `balance` which container's the account's balance in the particular token,\n// and `symbol` which is the abbreviation of the token name. To work correctly it must be provided with 4 arguments:\n//    `accountAddress` - An Ethereum address of the current user's account\n//    `address` - An Ethereum address of the token to check for (either a token or PLS)\n//    `provider` - The current provider\n//    `signer` - The current signer\nexport async function getBalanceAndSymbol(\n  accountAddress,\n  address,\n  provider,\n  signer,\n  weth_address,\n  coins\n) {\n  try {\n    if (address === weth_address) {\n      const balanceRaw = await provider.getBalance(accountAddress);\n\n      return {\n        balance: ethers.utils.formatEther(balanceRaw),\n        symbol: coins[0].abbr,\n      };\n    } else {\n      const token = new Contract(address, ERC20.abi, signer);\n      const tokenDecimals = await getDecimals(token);\n      const balanceRaw = await token.balanceOf(accountAddress);\n      const symbol = await token.symbol();\n\n      return {\n        balance: balanceRaw*10**(-tokenDecimals),\n        symbol: symbol,\n      };\n    }\n  } catch (error) {\n    console.log ('The getBalanceAndSymbol function had an error!');\n    console.log (error)\n    return false;\n  }\n}\n\n// This function swaps two particular tokens / PLS, it can handle switching from PLS to ERC20 token, ERC20 token to PLS, and ERC20 token to ERC20 token.\n// No error handling is done, so any issues can be caught with the use of .catch()\n// To work correctly, there needs to be 7 arguments:\n//    `address1` - An Ethereum address of the token to trade from (either a token or PLS)\n//    `address2` - An Ethereum address of the token to trade to (either a token or PLS)\n//    `amount` - A float or similar number representing the value of address1's token to trade\n//    `routerContract` - The router contract to carry out this trade\n//    `accountAddress` - An Ethereum address of the current user's account\n//    `signer` - The current signer\nexport async function swapTokens(\n  address1,\n  address2,\n  amount,\n  routerContract,\n  accountAddress,\n  signer\n) {\n  const tokens = [address1, address2];\n  const time = Math.floor(Date.now() / 1000) + 200000;\n  const deadline = ethers.BigNumber.from(time);\n\n  const token1 = new Contract(address1, ERC20.abi, signer);\n  const token1Decimals = await getDecimals(token1);\n  const amountInToken1 = ethers.utils.parseUnits(amount, token1Decimals);\n\n  // Check current allowance for token1\n  const currentAllowanceToken1 = await token1.allowance(accountAddress, routerContract.address);\n\n  // Approve token1 if needed\n  if (currentAllowanceToken1.lt(amountInToken1)) {\n    console.log('Insufficient allowance for token1. Attempting approval...');\n\n    try {\n      console.log(`Approving ${token1.address} transfer...`);\n      await token1.approve(routerContract.address, amountInToken1);\n      console.log(`Approved ${token1.address} transfer for ${amountInToken1.toString()}`);\n\n      // Once approval is successful, proceed with the swap\n      const amountOut = await routerContract.callStatic.getAmountsOut(amountInToken1, tokens);\n      const wplsAddress = await routerContract.WPLS();\n\n      try {\n        let tx;\n        if (address1 === wplsAddress) {\n          // Eth -> Token\n          tx = await routerContract.swapExactETHForTokens(\n            amountOut[1],\n            tokens,\n            accountAddress,\n            deadline,\n            { value: amountInToken1 }\n          );\n        } else if (address2 === wplsAddress) {\n          // Token -> Eth\n          tx = await routerContract.swapExactTokensForETH(\n            amountInToken1,\n            amountOut[1],\n            tokens,\n            accountAddress,\n            deadline\n          );\n        } else {\n          tx = await routerContract.swapExactTokensForTokens(\n            amountInToken1,\n            amountOut[1],\n            tokens,\n            accountAddress,\n            deadline\n          );\n        }\n\n        const receipt = await tx.wait(); // Wait for transaction confirmation\n        console.log('Transaction successful. Transaction receipt:', receipt);\n      } catch (error) {\n        console.error('Error swapping tokens:', error.message);\n      }\n    } catch (error) {\n      console.error('Error approving token transfer:', error.message);\n    }\n  } else {\n    console.log(`Sufficient allowance for ${token1.address} transfer exists.`);\n    // If the allowance is sufficient, proceed with the swap directly\n    const amountOut = await routerContract.callStatic.getAmountsOut(amountInToken1, tokens);\n    const wplsAddress = await routerContract.WPLS();\n\n    try {\n      let tx;\n      if (address1 === wplsAddress) {\n        // Eth -> Token\n        tx = await routerContract.swapExactETHForTokens(\n          amountOut[1],\n          tokens,\n          accountAddress,\n          deadline,\n          { value: amountInToken1 }\n        );\n      } else if (address2 === wplsAddress) {\n        // Token -> Eth\n        tx = await routerContract.swapExactTokensForETH(\n          amountInToken1,\n          amountOut[1],\n          tokens,\n          accountAddress,\n          deadline\n        );\n      } else {\n        tx = await routerContract.swapExactTokensForTokens(\n          amountInToken1,\n          amountOut[1],\n          tokens,\n          accountAddress,\n          deadline\n        );\n      }\n\n      const receipt = await tx.wait(); // Wait for transaction confirmation\n      console.log('Transaction successful. Transaction receipt:', receipt);\n    } catch (error) {\n     \n    }\n  }\n}\n\n\n\n//This function returns the conversion rate between two token addresses\n//    `address1` - An Ethereum address of the token to swaped from (either a token or AUT)\n//    `address2` - An Ethereum address of the token to swaped to (either a token or AUT)\n//    `amountIn` - Amount of the token at address 1 to be swaped from\n//    `routerContract` - The router contract to carry out this swap\nexport async function getAmountOut(\n  address1,\n  address2,\n  amountIn,\n  routerContract,\n  signer\n) {\n  try {\n    const token1 = new Contract(address1, ERC20.abi, signer);\n    const token1Decimals = await getDecimals(token1);\n\n    const token2 = new Contract(address2, ERC20.abi, signer);\n    const token2Decimals = await getDecimals(token2);\n\n    const values_out = await routerContract.getAmountsOut(\n      ethers.utils.parseUnits(String(amountIn), token1Decimals),\n      [address1, address2]\n    );\n    const amount_out = values_out[1]*10**(-token2Decimals);\n    console.log('amount out: ', amount_out)\n    return Number(amount_out);\n  } catch {\n    return false;\n  }\n}\n\n\n\n\n\n\n\nexport async function fetchReserves(address1, address2, pair, signer) {\n  try {\n\n    // Get decimals for each coin\n    const coin1 = new Contract(address1, ERC20.abi, signer);\n    const coin2 = new Contract(address2, ERC20.abi, signer);\n\n    const coin1Decimals = await getDecimals(coin1);\n    const coin2Decimals = await getDecimals(coin2);\n\n    // Get reserves\n    const reservesRaw = await pair.getReserves();\n\n    // Put the results in the right order\n    const results =  [\n      (await pair.token0()) === address1 ? reservesRaw[0] : reservesRaw[1],\n      (await pair.token1()) === address2 ? reservesRaw[1] : reservesRaw[0],\n    ];\n\n    // Scale each to the right decimal place\n    return [\n      (results[0]*10**(-coin1Decimals)),\n      (results[1]*10**(-coin2Decimals))\n    ]\n  } catch (err) {\n    console.log(\"error!\");\n    console.log(err);\n    return [0, 0];\n  }\n}\n\n// This function returns the reserves stored in a the liquidity pool between the token of address1 and the token\n// of address2, as well as the liquidity tokens owned by accountAddress for that pair.\n//    `address1` - An Ethereum address of the token to trade from (either a token or AUT)\n//    `address2` - An Ethereum address of the token to trade to (either a token or AUT)\n//    `factory` - The current factory\n//    `signer` - The current signer\nexport async function getReserves(\n  address1,\n  address2,\n  factory,\n  signer,\n  accountAddress\n) {\n  try {\n    const pairAddress = await factory.getPair(address1, address2);\n    const pair = new Contract(pairAddress, PAIR.abi, signer);\n  \n    if (pairAddress !== '0x0000000000000000000000000000000000000000'){\n  \n      const reservesRaw = await fetchReserves(address1, address2, pair, signer);\n      const liquidityTokens_BN = await pair.balanceOf(accountAddress);\n      const liquidityTokens = Number(\n        ethers.utils.formatEther(liquidityTokens_BN)\n      );\n    \n      return [\n        reservesRaw[0].toPrecision(12),\n        reservesRaw[1].toPrecision(12),\n        liquidityTokens,\n      ];\n    } else {\n      console.log(\"no reserves yet\");\n      return [0,0,0];\n    }\n  }catch (err) {\n    console.log(\"error!\");\n    console.log(err);\n    return [0, 0, 0];\n  }\n}\n\n","import { useEffect, useState, useRef, useCallback } from \"react\";\nimport { ethers } from \"ethers\";  // Ensure ethers is imported\nimport { createTheme, ThemeProvider } from \"@material-ui/core\";\nimport { SnackbarProvider } from \"notistack\";\nimport {\n  getAccount,\n  getFactory,\n  getRouter,\n  getNetwork,\n  getWeth,\n} from \"./ethereumFunctions\";\nimport COINS from \"./constants/coins\";\nimport * as chains from \"./constants/chains\";\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: \"#008938\",\n      contrastText: \"#000\",\n    },\n    secondary: {\n      main: \"#9e9e9e\",\n      contrastText: \"#000\",\n    },\n  },\n});\n\nconst Web3Provider = (props) => {\n  const [isConnected, setConnected] = useState(false);\n  const network = useRef({\n    provider: null,\n    signer: null,\n    account: null,\n    coins: [],\n    chainID: null,\n    router: null,\n    factory: null,\n    weth: null,\n  });\n\n  // Function to set up the connection to the Ethereum network\n  const setupConnection = useCallback(async () => {\n    if (!window.ethereum) {\n      console.log(\"No wallet provider found.\");\n      return;\n    }\n\n    try {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n\n      const account = await getAccount();\n      const chainId = await getNetwork(provider);\n\n      // Update network object\n      network.current.provider = provider;\n      network.current.signer = signer;\n      network.current.account = account;\n      network.current.chainID = chainId;\n\n      if (chains.networks.includes(chainId)) {\n        // Set router, coins, WETH, and factory addresses based on chainId\n        const router = getRouter(chains.routerAddress.get(chainId), signer);\n        const coins = COINS.get(chainId);\n        const wplsAddress = await router.WPLS();\n        const weth = getWeth(wplsAddress, signer);\n        const factoryAddress = await router.factory();\n        const factory = getFactory(factoryAddress, signer);\n\n        // Update network object with retrieved values\n        network.current.router = router;\n        network.current.coins = coins;\n        network.current.coins[0].address = wplsAddress;\n        network.current.weth = weth;\n        network.current.factory = factory;\n\n        // Save connection state to localStorage\n        localStorage.setItem('account', account);\n        localStorage.setItem('chainId', chainId);\n\n        setConnected(true);\n      } else {\n        console.log(\"Connected to the wrong network.\");\n        setConnected(false);\n      }\n    } catch (error) {\n      console.error(\"Error setting up connection:\", error);\n      setConnected(false);\n    }\n  }, []);\n\n  // Effect to check for existing connection state on mount\n  useEffect(() => {\n    const storedAccount = localStorage.getItem('account');\n    const storedChainId = localStorage.getItem('chainId');\n\n    if (storedAccount && storedChainId) {\n      // Set the account and chain ID back to the network ref\n      network.current.account = storedAccount;\n      network.current.chainID = parseInt(storedChainId, 10);\n      setupConnection(); // Try to set up the connection again\n    }\n  }, [setupConnection]);\n\n  // Effect to listen for wallet connection changes\n  useEffect(() => {\n    const handleAccountsChanged = (accounts) => {\n      if (accounts.length === 0) {\n        console.log(\"Please connect to MetaMask.\");\n        setConnected(false);\n        localStorage.removeItem('account');\n        localStorage.removeItem('chainId');\n      } else {\n        setupConnection(); // Trigger connection if accounts change\n      }\n    };\n\n    const handleChainChanged = () => {\n      setupConnection(); // Trigger connection if chain changes\n    };\n\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", handleAccountsChanged);\n      window.ethereum.on(\"chainChanged\", handleChainChanged);\n    }\n\n    // Cleanup event listeners on unmount\n    return () => {\n      if (window.ethereum) {\n        window.ethereum.removeListener(\"accountsChanged\", handleAccountsChanged);\n        window.ethereum.removeListener(\"chainChanged\", handleChainChanged);\n      }\n    };\n  }, [setupConnection]);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <SnackbarProvider maxSnack={3}>\n        <div>\n          {props.render(network.current)}\n          {!isConnected && (\n            <span\n              onClick={setupConnection}\n              style={{ cursor: 'pointer', color: '#008938', textDecoration: 'underline' }}\n            >\n            </span>\n          )}\n        </div>\n      </SnackbarProvider>\n    </ThemeProvider>\n  );\n};\n\nexport default Web3Provider;\n","export const MenuItems = [\n  {\n    title: \"Swap\",\n    url: \"/\",\n    cName: \"nav-links\",\n  },\n  {\n    title: \"Liquidity\",\n    url: \"/liquidity\",\n    cName: \"nav-links\",\n  },\n];\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { MenuItems } from \"./MenuItems\";\nimport \"./NavBar.css\";\n\nclass NavBar extends Component {\n  state = { clicked: false };\n\n  render() {\n    return (\n      <nav>\n        <div className=\"Title\">\n       \n          <h3 className=\"navbar-logo\">\n            \n            \n          </h3>\n        </div>\n\n        <div className=\"NavbarItems\">\n          <ul className={`nav-menu`}>\n            {MenuItems.map((item, index) => {\n              return (\n                <li key={index}>\n                  <Link className={\"nav-links\"} to={item.url}>\n                    {item.title}\n                  </Link>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default NavBar;\n","import React from \"react\";\nimport { Fab, Grid, InputBase, makeStyles } from \"@material-ui/core\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport PropTypes from \"prop-types\";\nimport * as COLORS from \"@material-ui/core/colors\";\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    padding: theme.spacing(1),\n    minHeight: \"80px\",\n    backgroundColor: COLORS.green[900],\n    borderRadius: theme.spacing(2),\n    borderColor: COLORS.green[400],\n    borderWidth: \"2px\",\n    borderStyle: \"solid\",\n  },\n  container_input: {\n    padding: theme.spacing(1),\n    minHeight: \"68px\",\n    backgroundColor: COLORS.green[900],\n    borderRadius: theme.spacing(2),\n    borderColor: COLORS.green[400],\n    borderWidth: \"1px\",\n    borderStyle: \"solid\",\n    marginLeft: \"50%\",\n    textAlign: \"right\",\n  },\n  container_blank: {\n    padding: theme.spacing(1),\n    minHeight: \"80px\",\n    borderRadius: theme.spacing(2),\n  },\n  grid: {\n    height: \"60px\",\n  },\n  fab: {\n    zIndex: \"0\",\n  },\n  input: {\n    ...theme.typography.h5,\n    width: \"100%\",\n  },\n  inputBase: {\n    textAlign: \"right\",\n    color: COLORS.green[50],\n  },\n  inputBase2: {\n    textAlign: \"right\",\n    color: COLORS.green[50],\n  },\n}));\n\nCoinField.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  symbol: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func,\n  activeField: PropTypes.bool.isRequired,\n};\n\nexport function RemoveLiquidityField1(props) {\n  // This component is used to selecting a coin and entering a value, the props are explained below:\n  //      onClick - (string) => void - Called when the button is clicked\n  //      symbol - string - The text displayed on the button\n  //      value - string - The value of the text field\n  //      onChange - (e) => void - Called when the text field changes\n  //      activeField - boolean - Whether text can be entered into this field or not\n\n  const classes = useStyles();\n  const { onClick, symbol, value, onChange, activeField } = props;\n  return (\n    <div className={classes.container_blank}>\n      <Grid\n        container\n        direction=\"row\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        className={classes.grid}\n      >\n        {/* Button */}\n        <Grid item xs={3}>\n          <Fab\n            size=\"small\"\n            variant=\"extended\"\n            onClick={onClick}\n            className={classes.fab}\n          >\n            {symbol}\n            <ExpandMoreIcon />\n          </Fab>\n        </Grid>\n        {/* Text Field */}\n        <Grid item xs={9}>\n          <InputBase\n            value={value}\n            onChange={onChange}\n            placeholder=\"0.0\"\n            disabled={!activeField}\n            classes={{\n              root: classes.container_input,\n              input: classes.inputBase,\n            }}\n          />\n        </Grid>\n        {/* </div> */}\n      </Grid>\n    </div>\n  );\n}\n\nexport function RemoveLiquidityField2(props) {\n  // This component is used to selecting a coin and entering a value, the props are explained below:\n  //      onClick - (string) => void - Called when the button is clicked\n  //      symbol - string - The text displayed on the button\n  //      value - string - The value of the text field\n  //      onChange - (e) => void - Called when the text field changes\n  //      activeField - boolean - Whether text can be entered into this field or not\n\n  const classes = useStyles();\n  const { onClick, symbol } = props;\n\n  return (\n    <div className={classes.container_blank}>\n      <Grid\n        container\n        direction=\"row\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        className={classes.grid}\n      >\n        {/* Button */}\n        <Grid item xs={3}>\n          <Fab\n            size=\"small\"\n            variant=\"extended\"\n            onClick={onClick}\n            className={classes.fab}\n          >\n            {symbol}\n            <ExpandMoreIcon />\n          </Fab>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default function CoinField(props) {\n  // This component is used to selecting a token and entering a value, the props are explained below:\n  //      onClick - (string) => void - Called when the button is clicked\n  //      symbol - string - The text displayed on the button\n  //      value - string - The value of the text field\n  //      onChange - (e) => void - Called when the text field changes\n  //      activeField - boolean - Whether text can be entered into this field or not\n\n  const classes = useStyles();\n  const { onClick, symbol, value, onChange, activeField } = props;\n\n  return (\n    <div className={classes.container}>\n      <Grid\n        container\n        direction=\"row\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        className={classes.grid}\n      >\n        {/* Button */}\n        <Grid item xs={3}>\n          <Fab\n            size=\"small\"\n            variant=\"extended\"\n            onClick={onClick}\n            className={classes.fab}\n          >\n            {symbol}\n            <ExpandMoreIcon />\n          </Fab>\n        </Grid>\n\n        {/* Text Field */}\n        <Grid item xs={9}>\n          <InputBase\n            value={value}\n            onChange={onChange}\n            placeholder=\"0.0\"\n            disabled={!activeField}\n            classes={{ root: classes.input, input: classes.inputBase }}\n          />\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { ButtonBase, Grid, makeStyles, Typography } from \"@material-ui/core\";\nimport PropTypes from \"prop-types\";\nimport * as COLORS from \"@material-ui/core/colors\";\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    width: \"100%\",\n    paddingTop: theme.spacing(0.5),\n    paddingBottom: theme.spacing(0.5),\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    textAlign: \"center\",\n    \"&:hover, &$focusVisible\": {\n      backgroundColor: COLORS.green[900],\n      color: COLORS.blue[100],\n      \n    },\n  },\n  coinName: {\n    opacity: 0.6,\n    \n  },\n  coinImage: {\n    width: 30, // Adjust the image width as needed\n    height: 30, // Adjust the image height as needed\n    marginRight: theme.spacing(3), // Adjust the margin as needed\n  },\n}));\n\nCoinButton.propTypes = {\n  coinName: PropTypes.string.isRequired,\n  coinAbbr: PropTypes.string.isRequired,\n  imageURI: PropTypes.string, // Define imageURI as a prop\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default function CoinButton(props) {\n  const { coinName, coinAbbr, imageURI, onClick, ...other } = props;\n  const classes = useStyles();\n\n  return (\n    <ButtonBase focusRipple className={classes.button} onClick={onClick}>\n      <Grid container alignItems=\"center\">\n        {imageURI && (\n          <Grid item>\n            <img src={imageURI} alt={`${coinName} Logo`} className={classes.coinImage} />\n          </Grid>\n        )}\n        <Grid item style={{ textAlign: \"left\" }}>\n          <Typography variant=\"h6\">{coinAbbr}</Typography>\n          <Typography variant=\"body2\" className={classes.coinName}>\n            {coinName}\n          </Typography>\n        </Grid>\n      </Grid>\n    </ButtonBase>\n  );\n}\n","import React from \"react\";\nimport {\n  Button,\n  Dialog,\n  Grid,\n  IconButton,\n  makeStyles,\n  TextField,\n  Typography,\n  withStyles,\n} from \"@material-ui/core\";\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\nimport MuiDialogActions from \"@material-ui/core/DialogActions\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport CoinButton from \"./CoinButton\";\nimport { doesTokenExist } from \"../ethereumFunctions\";\nimport PropTypes from \"prop-types\";\nimport * as COLORS from \"@material-ui/core/colors\";\n\nconst styles = (theme) => ({\n  dialogContainer: {\n    borderRadius: theme.spacing(2),\n    backgroundColor: \"rgba(37, 44, 69)\", // Adjusted for transparency\n    color: \"white\",\n  },\n  titleSection: {\n    padding: theme.spacing(2),\n  },\n  titleText: {\n    alignSelf: \"center\",\n    color: COLORS.green[50], // Changed title text color to light green\n  },\n  hr: {\n    margin: 0,\n    backgroundColor: COLORS.green[50], // Changed horizontal line color to light green\n    height: \"2px\", // Increased line thickness\n  },\n  address: {\n    paddingLeft: theme.spacing(2.5),\n    paddingRight: theme.spacing(2.5),\n    paddingBottom: theme.spacing(2),\n    \"& .MuiOutlinedInput-root\": {\n      backgroundColor: \"#004d40\", // Dark green background\n      color: \"white\", // White text color\n      \"& fieldset\": {\n        borderColor: \"#00ff00\", // Green border color\n      },\n      \"&:hover fieldset\": {\n        borderColor: \"#00ff00\", // Green border on hover\n      },\n    },\n    \"& .MuiInputBase-input\": {\n      color: \"white\", // White text color in input\n    },\n    \"& .MuiFormHelperText-root\": {\n      color: \"red\", // Error message in red\n    },\n  },\n  coinList: {\n    height: \"315px\",\n    overflowY: \"scroll\",\n    color: COLORS.green[50], // Light green text color for the coin list\n    backgroundColor: COLORS.grey[800],\n  },\n  coinContainer: {\n    paddingLeft: theme.spacing(1.5),\n    paddingRight: theme.spacing(0.5),\n    paddingTop: theme.spacing(2),\n    marginTop: theme.spacing(2),\n    overflow: \"hidden\",\n  },\n});\n\n// Custom useStyles hook\nconst useStyles = makeStyles(styles);\n\n// Custom DialogTitle component\nconst DialogTitle = withStyles(styles)((props) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle\n      disableTypography\n      className={classes.titleSection}\n      {...other}\n    >\n      <Grid\n        container\n        direction=\"row\"\n        justifyContent=\"space-between\"\n        alignContent=\"center\"\n      >\n        <Typography variant=\"h6\" className={classes.titleText}>\n          {children}\n        </Typography>\n        {onClose ? (\n          <IconButton aria-label=\"close\" onClick={onClose}>\n            <CloseIcon style={{ color: COLORS.green[50] }} /> {/* Close icon color */}\n          </IconButton>\n        ) : null}\n      </Grid>\n    </MuiDialogTitle>\n  );\n});\n\n// Custom DialogActions component\nconst DialogActions = withStyles((theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n    backgroundColor: \"rgba(37, 44, 69)\", // Dialog actions background with transparency\n  },\n}))(MuiDialogActions);\n\nCoinDialog.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n  coins: PropTypes.array.isRequired,\n};\n\nexport default function CoinDialog(props) {\n  const classes = useStyles();\n  const { onClose, open, coins, signer, ...others } = props;\n\n  const [address, setAddress] = React.useState(\"\");\n  const [error, setError] = React.useState(\"\");\n\n  const submit = () => {\n    if (doesTokenExist(address, signer)) {\n      exit(address);\n    } else {\n      setError(\"This address is not valid\");\n    }\n  };\n\n  const exit = (value) => {\n    setError(\"\");\n    setAddress(\"\");\n    onClose(value);\n  };\n\n  return (\n    <Dialog\n      open={open}\n      onClose={() => exit(undefined)}\n      fullWidth\n      maxWidth=\"sm\"\n      classes={{ paper: classes.dialogContainer }}\n    >\n      <DialogTitle onClose={() => exit(undefined)}>Select Token</DialogTitle>\n\n      <hr className={classes.hr} />\n\n      <div className={classes.coinContainer}>\n  <Grid container direction=\"column\" spacing={2} alignContent=\"center\">\n    <TextField\n      value={address}\n      onChange={(e) => setAddress(e.target.value)}\n      variant=\"outlined\"\n      placeholder=\"Paste Token Address\"\n      error={error !== \"\"}\n      helperText={error}\n      fullWidth\n      className={classes.address}\n      InputProps={{\n        style: {\n          backgroundColor: \"#004d40\", \n          color: \"white\", \n        },\n      }}\n      InputLabelProps={{\n        style: {\n          color: \"white\", \n        },\n      }}\n    />\n\n          <hr className={classes.hr} />\n\n          <Grid item className={classes.coinList}>\n            <Grid container direction=\"column\">\n              {coins.map((coin, index) => (\n                <Grid item key={index} xs={28}>\n                  <CoinButton\n                    coinName={coin.name}\n                    coinAbbr={coin.abbr}\n                    imageURI={coin.imageURI}\n                    onClick={() => exit(coin.address)}\n                  />\n                </Grid>\n              ))}\n            </Grid>\n          </Grid>\n        </Grid>\n      </div>\n\n      <hr className={classes.hr} />\n\n      <DialogActions>\n  <Button\n    autoFocus\n    onClick={submit}\n    style={{ color: \"white\", backgroundColor: \"transparent\" }} \n  >\n    <b>ENTER</b>\n  </Button>\n</DialogActions>\n\n    </Dialog>\n  );\n}\n","import React from \"react\";\nimport { Button, CircularProgress, makeStyles } from \"@material-ui/core\";\nimport green from \"@material-ui/core/colors/green\";\nimport red from \"@material-ui/core/colors/red\";\n\nconst useStyles = makeStyles((theme) => ({\n  wrapper: {\n    margin: 0,\n    position: \"relative\",\n  },\n  progress: {\n    color: green[500],\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    marginTop: -12,\n    marginLeft: -12,\n  },\n}));\n\nexport default function LoadingButton(props) {\n  const classes = useStyles();\n  const { children, loading, valid, success, fail, onClick, ...other } = props;\n  return (\n    <div className={classes.wrapper}>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        fullWidth\n        disabled={loading || !valid}\n        type=\"submit\"\n        onClick={onClick}\n        {...other}\n      >\n        {children}\n      </Button>\n      {loading && <CircularProgress size={24} className={classes.progress} />}\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  Dialog,\n  Grid,\n  IconButton,\n  makeStyles,\n  Typography,\n  withStyles,\n} from \"@material-ui/core\";\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\nimport CloseIcon from \"@material-ui/icons/Close\";\n\nconst styles = (theme) => ({\n  dialogContainer: {\n    borderRadius: theme.spacing(2),\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nexport default function WrongNetwork(props) {\n\n  const classes = useStyles();\n  const {open} = props;\n  return (\n    <Dialog\n      open={open}\n      fullWidth\n      maxWidth=\"sm\"\n      classes={{ paper: classes.dialogContainer }}\n    >\n      <MuiDialogTitle>Unsupported Network. Switch to pulsechain.</MuiDialogTitle>\n    </Dialog>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport {\n  Container,\n  Grid,\n  IconButton,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport SwapVerticalCircleIcon from \"@material-ui/icons/SwapVerticalCircle\";\nimport { useSnackbar } from \"notistack\";\nimport LoopIcon from \"@material-ui/icons/Loop\";\nimport * as COLORS from \"@material-ui/core/colors\";\n\nimport {\n  getAccount,\n  getFactory,\n  getProvider,\n  getRouter,\n  getSigner,\n  getNetwork,\n  getAmountOut,\n  getBalanceAndSymbol,\n  getWeth,\n  swapTokens,\n  getReserves,\n} from \"../ethereumFunctions\";\nimport CoinField from \"./CoinField\";\nimport CoinDialog from \"./CoinDialog\";\nimport LoadingButton from \"../Components/LoadingButton\";\nimport WrongNetwork from \"../Components/wrongNetwork\";\nimport COINS from \"../constants/coins\";\nimport * as chains from \"../constants/chains\";\n\n\nconst styles = (theme) => ({\n  paperContainer: {\n    backgroundColor: \"rgba(37, 44, 69, 0.8)\",\n    color: COLORS.green[50],\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(1),\n    paddingBottom: theme.spacing(3),\n    border: \"2px solid #00ff00\", \n    boxShadow: \"0 0 8px 4px rgba(0, 174, 255, 0.6)\", \n    transition: \"box-shadow 0.3s ease-in-out\",\n    \"&:hover\": {\n      boxShadow: \"0 0 12px 6px rgba(0, 174, 255, 0.6)\", \n      \n    },\n  },\n  \n  switchButton: {\n    zIndex: 1,\n    margin: \"-16px\",\n    padding: theme.spacing(0.8),\n    backgroundColor: COLORS.green[50],\n  },\n\n  fullWidth: {\n    width: \"100%\",\n  },\n\n  title: {\n    textAlign: \"left\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1), \n    \n  },\n\n  hr: {\n    width: \"100%\",\n  },\n\n  balance: {\n    padding: theme.spacing(1),\n    overflowWrap: \"break-word\",\n    textAlign: \"center\",\n  },\n\n  footer: {\n    marginTop: \"285px\",\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction CoinSwapper(props) {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n\n  // Stores a record of whether their respective dialog window is open\n  const [dialog1Open, setDialog1Open] = React.useState(false);\n  const [dialog2Open, setDialog2Open] = React.useState(false);\n  const [wrongNetworkOpen, setwrongNetworkOpen] = React.useState(false);\n\n  // Stores data about their respective coin\n  const [coin1, setCoin1] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n  const [coin2, setCoin2] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n\n  // Stores the current reserves in the liquidity pool between coin1 and coin2\n  const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]);\n\n  // Stores the current value of their respective text box\n  const [field1Value, setField1Value] = React.useState(\"\");\n  const [field2Value, setField2Value] = React.useState(\"\");\n\n  // Controls the loading button\n  const [loading, setLoading] = React.useState(false);\n\n  // Switches the top and bottom coins, this is called when users hit the swap button or select the opposite\n  // token in the dialog (e.g. if coin1 is TokenA and the user selects TokenB when choosing coin2)\n  const switchFields = () => {\n    setCoin1(coin2);\n    setCoin2(coin1);\n    setField1Value(field2Value);\n    setReserves(reserves.reverse());\n  };\n\n  // These functions take an HTML event, pull the data out and puts it into a state variable.\n  const handleChange = {\n    field1: (e) => {\n      setField1Value(e.target.value);\n    },\n  };\n\n  // Turns the account's balance into something nice and readable\n  const formatBalance = (balance, symbol) => {\n    if (balance && symbol)\n      return parseFloat(balance).toPrecision(8) + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Turns the coin's reserves into something nice and readable\n  const formatReserve = (reserve, symbol) => {\n    if (reserve && symbol) return reserve + \" \" + symbol;\n    else return \"0.0\";\n  };\n\n  // Determines whether the button should be enabled or not\n  const isButtonEnabled = () => {\n\n    // If both coins have been selected, and a valid float has been entered which is less than the user's balance, then return true\n    const parsedInput1 = parseFloat(field1Value);\n    const parsedInput2 = parseFloat(field2Value);\n    return (\n      coin1.address &&\n      coin2.address &&\n      !isNaN(parsedInput1) &&\n      !isNaN(parsedInput2) &&\n      0 < parsedInput1 &&\n      parsedInput1 <= coin1.balance\n    );\n  };\n\n  // Called when the dialog window for coin1 exits\n  const onToken1Selected = (address) => {\n    // Close the dialog window\n    setDialog1Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin2.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(props.network.account, address, props.network.provider, props.network.signer, props.network.weth.address, props.network.coins).then((data) => {\n        setCoin1({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // Called when the dialog window for coin2 exits\n  const onToken2Selected = (address) => {\n    // Close the dialog window\n    setDialog2Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin1.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(props.network.account, address, props.network.provider, props.network.signer, props.network.weth.address, props.network.coins).then((data) => {\n        setCoin2({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // Calls the swapTokens Ethereum function to make the swap, then resets nessicary state variables\n  const swap = () => {\n    console.log(\"Attempting to swap tokens...\");\n    setLoading(true);\n\n    swapTokens(\n      coin1.address,\n      coin2.address,\n      field1Value,\n      props.network.router,\n      props.network.account,\n      props.network.signer\n    )\n    \n      .then(() => {\n        setLoading(false);\n\n        // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\n        setField1Value(\"\");\n        enqueueSnackbar(\"Transaction Successful\", { variant: \"success\" });\n      })\n      .catch((e) => {\n        setLoading(false);\n        enqueueSnackbar(\"Transaction Failed (\" + e.message + \")\", {\n          variant: \"error\",\n          autoHideDuration: 5000,\n        });\n      });\n      \n  };\n\n  // The lambdas within these useEffects will be called when a particular dependency is updated. These dependencies\n  // are defined in the array of variables passed to the function after the lambda expression. If there are no dependencies\n  // the lambda will only ever be called when the component mounts. These are very useful for calculating new values\n  // after a particular state change, for example, calculating the new exchange rate whenever the addresses\n  // of the two coins change.\n\n  // This hook is called when either of the state variables `coin1.address` or `coin2.address` change.\n  // This means that when the user selects a different coin to convert between, or the coins are swapped,\n  // the new reserves will be calculated.\n  useEffect(() => {\n    console.log(\n      \"Trying to get Reserves between:\\n\" + coin1.address + \"\\n\" + coin2.address\n    );\n\n    if (coin1.address && coin2.address) {\n      getReserves(coin1.address, coin2.address, props.network.factory, props.network.signer, props.network.account).then(\n        (data) => setReserves(data)\n      );\n    }\n  }, [coin1.address, coin2.address, props.network.account, props.network.factory, props.network.router, props.network.signer]);\n\n  // This hook is called when either of the state variables `field1Value` `coin1.address` or `coin2.address` change.\n  // It attempts to calculate and set the state variable `field2Value`\n  // This means that if the user types a new value into the conversion box or the conversion rate changes,\n  // the value in the output box will change.\n  useEffect(() => {\n    if (isNaN(parseFloat(field1Value))) {\n      setField2Value(\"\");\n    } else if (parseFloat(field1Value) && coin1.address && coin2.address) {\n      getAmountOut(coin1.address, coin2.address, field1Value, props.network.router, props.network.signer).then(\n        (amount) => setField2Value(amount.toFixed(7))\n      ).catch(e => {\n        console.log(e);\n        setField2Value(\"NA\");\n      })\n    } else {\n      setField2Value(\"\");\n    }\n  }, [field1Value, coin1.address, coin2.address]);\n\n  // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\n  // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\n  useEffect(() => {\n    const coinTimeout = setTimeout(() => {\n      console.log('props: ', props);\n      console.log(\"Checking balances...\");\n\n      if (coin1.address && coin2.address && props.network.account) {\n        getReserves(\n          coin1.address,\n          coin2.address,\n          props.network.factory,\n          props.network.signer,\n          props.network.account\n        ).then((data) => setReserves(data));\n      }\n\n      if (coin1.address && props.network.account &&!wrongNetworkOpen) {\n        getBalanceAndSymbol(\n          props.network.account,\n          coin1.address,\n          props.network.provider,\n          props.network.signer,\n          props.network.weth.address,\n          props.network.coins\n          ).then(\n          (data) => {\n            setCoin1({\n              ...coin1,\n              balance: data.balance,\n            });\n          }\n        );\n      }\n      if (coin2.address && props.network.account &&!wrongNetworkOpen) {\n        getBalanceAndSymbol(\n          props.network.account,\n          coin2.address,\n          props.network.provider,\n          props.network.signer,\n          props.network.weth.address,\n          props.network.coins\n          ).then(\n          (data) => {\n            setCoin2({\n              ...coin2,\n              balance: data.balance,\n            });\n          }\n        );\n      }\n    }, 10000);\n\n    return () => clearTimeout(coinTimeout);\n  });\n\n  return (\n    <div>\n      {/* Dialog Windows */}\n      <CoinDialog\n        open={dialog1Open}\n        onClose={onToken1Selected}\n        coins={props.network.coins}\n        props={props.network.signer}\n      />\n      <CoinDialog\n        open={dialog2Open}\n        onClose={onToken2Selected}\n        coins={props.network.coins}\n        signer={props.network.signer}\n      />\n      <WrongNetwork\n        open={wrongNetworkOpen}\n        />\n\n      {/* Coin Swapper */}\n      <Container maxWidth=\"xs\">\n        <Paper className={classes.paperContainer}>\n        <Grid container alignItems=\"center\">\n  <Grid item>\n    <div style={{ borderRadius: '50%', overflow: 'hidden', width: '40px', height: '40px', marginRight: '10px', marginLeft: '10px' , margin: '10px' }}>\n      <img src=\"exe.jpg\" alt=\"DexTop Icon\" style={{ width: '100%', height: 'auto' }} />\n    </div>\n  </Grid>\n  <Grid item>\n  <Typography variant=\"h6\" className={classes.title} style={{ fontFamily: 'Press Start 2P' }}>\n  DexTop Swap\n</Typography>\n  </Grid>\n</Grid>\n\n\n          <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n            <Grid item xs={12} className={classes.fullWidth}>\n              <CoinField\n                activeField={true}\n                value={field1Value}\n                onClick={() => setDialog1Open(true)}\n                onChange={handleChange.field1}\n                symbol={coin1.symbol !== undefined ? coin1.symbol : \"Select\"}\n              />\n            </Grid>\n\n            <IconButton onClick={switchFields} className={classes.switchButton}>\n              <SwapVerticalCircleIcon fontSize=\"medium\" />\n            </IconButton>\n\n            <Grid item xs={12} className={classes.fullWidth}>\n              <CoinField\n                activeField={false}\n                value={field2Value}\n                onClick={() => setDialog2Open(true)}\n                symbol={coin2.symbol !== undefined ? coin2.symbol : \"Select\"}\n              />\n            </Grid>\n\n            <hr className={classes.hr} />\n\n            {/* Balance Display */}\n            <Typography variant=\"h6\" >Your Balances</Typography>\n            <Grid container direction=\"row\" justifyContent=\"space-between\">\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(coin1.balance, coin1.symbol)}\n                </Typography>\n              </Grid>\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(coin2.balance, coin2.symbol)}\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <hr className={classes.hr} />\n\n            {/* Reserves Display */}\n            <Typography variant=\"h6\" >Reserves</Typography>\n            <Grid container direction=\"row\" justifyContent=\"space-between\">\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatReserve(reserves[0], coin1.symbol)}\n                </Typography>\n              </Grid>\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatReserve(reserves[1], coin2.symbol)}\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <hr className={classes.hr} />\n\n            <LoadingButton\n              loading={loading}\n              valid={isButtonEnabled()}\n              success={false}\n              fail={false}\n              onClick={swap}\n            >\n              <LoopIcon />\n              Swap\n            </LoadingButton>\n          </Grid>\n        </Paper>\n      </Container>\n\n    {/* NOT USED\n  container\n  className={classes.footer}\n  direction=\"column\"\n  justifyContent=\"center\"\n  alignItems=\"center\"\n  spacing={2}\n  style={{ maxWidth: '100%', margin: '0 auto'}} \n>\n  <Grid item>\n    <p style={{ textAlign: 'center', color: 'white' }}>\n      <a href=\"https://dextop.pro/\" style={{ color: 'white' }}>DEXTOP</a>\n    </p>\n  </Grid>\n  <Grid item>\n    <p style={{ textAlign: 'center', color: 'white' }}>\n      <a href=\"https://internetmoney.io/\" style={{ color: 'white' }}>IM WALLET</a>\n    </p>\n  </Grid>\n</Grid> */}\n  </div>\n  );\n}\n\nexport default CoinSwapper;","import React from \"react\";\nimport { ButtonGroup, Button } from \"@material-ui/core\";\n\nexport default function SwitchButton(props) {\n  const { setDeploy } = props;\n\n  const changeStyles = (K) => {\n    if (K === true) {\n      let add_button = document.getElementById(\"add-button\");\n      add_button.style.backgroundColor = \"#008938\";\n\n      let remove_button = document.getElementById(\"remove-button\");\n      remove_button.style.backgroundColor = \"#9e9e9e\";\n    } else {\n      let remove_button = document.getElementById(\"remove-button\");\n      remove_button.style.backgroundColor = \"#008938\";\n\n      let add_button = document.getElementById(\"add-button\");\n      add_button.style.backgroundColor = \"#9e9e9e\";\n    }\n  };\n\n  return (\n    <div>\n      <ButtonGroup size=\"large\" variant=\"contained\">\n        <Button\n          id=\"add-button\"\n          color=\"primary\"\n          text=\"white\"\n          onClick={() => {\n            setDeploy(true);\n            changeStyles(true);\n          }}\n        >\n          Add Liquidity\n        </Button>\n\n        <Button\n          id=\"remove-button\"\n          color=\"secondary\"\n          text=\"white\"\n          onClick={() => {\n            setDeploy(false);\n            changeStyles(false);\n          }}\n        >\n          Remove Liquidity\n        </Button>\n      </ButtonGroup>\n    </div>\n  );\n}\n","import { Contract, ethers } from \"ethers\";\nimport { fetchReserves, getDecimals } from \"../ethereumFunctions\";\n\nconst ERC20 = require(\"../build/ERC20.json\");\nconst PAIR = require(\"../build/IUniswapV2Pair.json\");\n\n// Function used to add Liquidity to any pair of tokens or token-AUT\n// To work correctly, there needs to be 9 arguments:\n//    `address1` - An Ethereum address of the coin to add from (either a token or AUT)\n//    `address2` - An Ethereum address of the coin to add to (either a token or AUT)\n//    `amount1` - A float or similar number representing the value of address1's coin to add\n//    `amount2` - A float or similar number representing the value of address2's coin to add\n//    `amount1Min` - A float or similar number representing the minimum of address1's coin to add\n//    `amount2Min` - A float or similar number representing the minimum of address2's coin to add\n//    `routerContract` - The router contract to carry out this trade\n//    `accountAddress` - An Ethereum address of the current user's account\n//    `provider` - The current provider\n//    `signer` - The current signer\nexport async function addLiquidity(\n  address1,\n  address2,\n  amount1,\n  amount2,\n  amount1min,\n  amount2min,\n  routerContract,\n  account,\n  signer\n) {\n  const token1 = new Contract(address1, ERC20.abi, signer);\n  const token2 = new Contract(address2, ERC20.abi, signer);\n\n  const token1Decimals = await getDecimals(token1);\n  const token2Decimals = await getDecimals(token2);\n\n  const amountIn1 = ethers.utils.parseUnits(amount1, token1Decimals);\n  const amountIn2 = ethers.utils.parseUnits(amount2, token2Decimals);\n\n  const amount1Min = ethers.utils.parseUnits(amount1min, token1Decimals);\n  const amount2Min = ethers.utils.parseUnits(amount2min, token2Decimals);\n\n  const time = Math.floor(Date.now() / 1000) + 200000;\n  const deadline = ethers.BigNumber.from(time);\n\n  // Check current allowances for both tokens\n  const currentAllowance1 = await token1.allowance(account, routerContract.address);\n  const currentAllowance2 = await token2.allowance(account, routerContract.address);\n\n  // Approve both tokens only if needed\n  if (currentAllowance1.lt(amountIn1) || currentAllowance2.lt(amountIn2)) {\n    const approvalPromises = [];\n\n    if (currentAllowance1.lt(amountIn1)) {\n      approvalPromises.push(token1.approve(routerContract.address, amountIn1));\n    }\n\n    if (currentAllowance2.lt(amountIn2)) {\n      approvalPromises.push(token2.approve(routerContract.address, amountIn2));\n    }\n\n    // Execute both approvals concurrently\n    await Promise.all(approvalPromises);\n  }\n\n  // Check updated allowances after approvals\n  const updatedAllowance1 = await token1.allowance(account, routerContract.address);\n  const updatedAllowance2 = await token2.allowance(account, routerContract.address);\n\n  // Proceed with liquidity addition if both token allowances meet the required amounts\n  if (updatedAllowance1.gte(amountIn1) && updatedAllowance2.gte(amountIn2)) {\n    const wplsAddress = await routerContract.WPLS();\n\n    console.log([\n      address1,\n      address2,\n      amountIn1,\n      amountIn2,\n      amount1Min,\n      amount2Min,\n      account,\n      deadline,\n    ]);\n\n    if (address1 === wplsAddress) {\n      // Eth + Token\n      await routerContract.addLiquidityETH(\n        address2,\n        amountIn2,\n        amount2Min,\n        amount1Min,\n        account,\n        deadline,\n        { value: amountIn1 }\n      );\n    } else if (address2 === wplsAddress) {\n      // Token + Eth\n      await routerContract.addLiquidityETH(\n        address1,\n        amountIn1,\n        amount1Min,\n        amount2Min,\n        account,\n        deadline,\n        { value: amountIn2 }\n      );\n    } else {\n      // Token + Token\n      await routerContract.addLiquidity(\n        address1,\n        address2,\n        amountIn1,\n        amountIn2,\n        amount1Min,\n        amount2Min,\n        account,\n        deadline\n      );\n    }\n  }\n}\n\n\n\n// Function used to remove Liquidity from any pair of tokens or token-AUT\n// To work correctly, there needs to be 9 arguments:\n//    `address1` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `address2` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `liquidity_tokens` - A float or similar number representing the value of liquidity tokens you will burn to get tokens back\n//    `amount1Min` - A float or similar number representing the minimum of address1's coin to recieve\n//    `amount2Min` - A float or similar number representing the minimum of address2's coin to recieve\n//    `routerContract` - The router contract to carry out this trade\n//    `accountAddress` - An Ethereum address of the current user's account\n//    `provider` - The current provider\n//    `signer` - The current signer\nexport async function removeLiquidity(\n  address1,\n  address2,\n  liquidity_tokens,\n  amount1min,\n  amount2min,\n  routerContract,\n  account,\n  signer,\n  factory\n) {\n  const token1 = new Contract(address1, ERC20.abi, signer);\n  const token2 = new Contract(address2, ERC20.abi, signer);\n\n  const token1Decimals = await getDecimals(token1);\n  const token2Decimals = await getDecimals(token2);\n\n  const Getliquidity = (liquidity_tokens) => {\n    if (liquidity_tokens < 0.001) {\n      return ethers.BigNumber.from(liquidity_tokens * 10 ** 18);\n    }\n    return ethers.utils.parseUnits(String(liquidity_tokens), 18);\n  };\n\n  const liquidity = Getliquidity(liquidity_tokens);\n  console.log('liquidity: ', liquidity);\n\n  const amount1Min = ethers.utils.parseUnits(String(amount1min), token1Decimals);\n  const amount2Min = ethers.utils.parseUnits(String(amount2min), token2Decimals);\n\n  const time = Math.floor(Date.now() / 1000) + 200000;\n  const deadline = ethers.BigNumber.from(time);\n\n  const wplsAddress = await routerContract.WPLS();\n  const pairAddress = await factory.getPair(address1, address2);\n  const pair = new Contract(pairAddress, PAIR.abi, signer);\n\n  const currentAllowance = await pair.allowance(account, routerContract.address);\n\n  // Approve liquidity tokens only if needed\n  if (currentAllowance.lt(liquidity)) {\n    console.log('Approving liquidity tokens...');\n    const approveTx = await pair.approve(routerContract.address, liquidity);\n    await approveTx.wait(); // Wait for approval transaction to be mined\n    console.log('Liquidity tokens approved!');\n  } else {\n    console.log('Sufficient allowance for liquidity tokens exists.');\n  }\n\n  console.log([\n    address1,\n    address2,\n    Number(liquidity),\n    Number(amount1Min),\n    Number(amount2Min),\n    account,\n    deadline,\n  ]);\n\n  if (address1 === wplsAddress) {\n    // Eth + Token\n    await routerContract.removeLiquidityETH(\n      address2,\n      liquidity,\n      amount2Min,\n      amount1Min,\n      account,\n      deadline\n    );\n  } else if (address2 === wplsAddress) {\n    // Token + Eth\n    await routerContract.removeLiquidityPLS(\n      address1,\n      liquidity,\n      amount1Min,\n      amount2Min,\n      account,\n      deadline\n    );\n  } else {\n    // Token + Token\n    await routerContract.removeLiquidity(\n      address1,\n      address2,\n      liquidity,\n      amount1Min,\n      amount2Min,\n      account,\n      deadline\n    );\n  }\n}\n\nconst quote = (amount1, reserve1, reserve2) => {\n  const amount2 = amount1 * (reserve2 / reserve1);\n  return [amount2];\n};\n\n\n// Function used to get a quote of the liquidity addition\n//    `address1` - An Ethereum address of the coin to recieve (either a token or PLS)\n//    `address2` - An Ethereum address of the coin to recieve (either a token or PLS)\n//    `amountA_desired` - The prefered value of the first token that the user would like to deploy as liquidity\n//    `amountB_desired` - The prefered value of the second token that the user would like to deploy as liquidity\n//    `factory` - The current factory\n//    `signer` - The current signer\n\nasync function quoteMintLiquidity(\n  address1,\n  address2,\n  amountA,\n  amountB,\n  factory,\n  signer\n){\n  const MINIMUM_LIQUIDITY = 1000;\n  let _reserveA = 0;\n  let _reserveB = 0;\n  let totalSupply = 0;\n  [_reserveA, _reserveB, totalSupply] = await factory.getPair(address1, address2).then(async (pairAddress) => {\n    if (pairAddress !== '0x0000000000000000000000000000000000000000'){\n      const pair = new Contract(pairAddress, PAIR.abi, signer);\n\n      const reservesRaw = await fetchReserves(address1, address2, pair, signer); // Returns the reserves already formated as ethers\n      const reserveA = reservesRaw[0];\n      const reserveB = reservesRaw[1];\n    \n      const _totalSupply = await pair.totalSupply();\n      const totalSupply = Number(ethers.utils.formatEther(_totalSupply));\n      return [reserveA, reserveB, totalSupply]\n    } else {\n      return [0,0,0]\n    }\n  });\n\n  const token1 = new Contract(address1, ERC20.abi, signer);\n  const token2 = new Contract(address2, ERC20.abi, signer);\n\n  // Need to do all the decimals work to account for 0 decimal numbers\n\n  const token1Decimals = await getDecimals(token1);\n  const token2Decimals = await getDecimals(token2);\n\n  const valueA = amountA*(10**token1Decimals);\n  const valueB = amountB*(10**token2Decimals);\n\n  const reserveA = _reserveA*(10**token1Decimals);\n  const reserveB = _reserveB*(10**token2Decimals);\n\n  if (totalSupply == 0){\n    return Math.sqrt(((valueA * valueB)-MINIMUM_LIQUIDITY))*10**(-18);\n  };\n  \n  return (\n    Math.min(valueA*totalSupply/reserveA, valueB*totalSupply/reserveB)\n  );\n};\n\nexport async function quoteAddLiquidity(\n  address1,\n  address2,\n  amountADesired,\n  amountBDesired,\n  factory,\n  signer\n) {\n\n  const pairAddress = await factory.getPair(address1, address2);\n  const pair = new Contract(pairAddress, PAIR.abi, signer);\n\n  const reservesRaw = await fetchReserves(address1, address2, pair, signer); // Returns the reserves already formated as ethers\n  const reserveA = reservesRaw[0];\n  const reserveB = reservesRaw[1];\n\n  if (reserveA === 0 && reserveB === 0) {\n    const amountOut = await quoteMintLiquidity(\n      address1,\n      address2,\n      amountADesired,\n      amountBDesired,\n      factory,\n      signer);\n    return [\n      amountADesired,\n      amountBDesired,\n      amountOut.toPrecision(8),\n    ];\n  } else {\n    const amountBOptimal = quote(amountADesired, reserveA, reserveB);\n    if (amountBOptimal <= amountBDesired) {\n      const amountOut = await quoteMintLiquidity(\n        address1,\n        address2,\n        amountADesired,\n        amountBOptimal,\n        factory,\n        signer);\n      return [\n        amountADesired,\n        amountBOptimal,\n        amountOut.toPrecision(8),\n      ];\n    } else {\n      const amountAOptimal = quote(\n        amountBDesired,\n        reserveB,\n        reserveA\n      );\n      const amountOut = await quoteMintLiquidity(\n        address1,\n        address2,\n        amountAOptimal,\n        amountBDesired,\n        factory,\n        signer);\n      return [\n        amountAOptimal,\n        amountBDesired,\n        amountOut.toPrecision(8),\n      ];\n    }\n  }\n}\n\nexport async function quoteRemoveLiquidity(\n  address1,\n  address2,\n  liquidity,\n  factory,\n  signer\n) {\n  const pairAddress = await factory.getPair(address1, address2);\n  console.log(\"pair address\", pairAddress);\n  const pair = new Contract(pairAddress, PAIR.abi, signer);\n\n  const reservesRaw = await fetchReserves(address1, address2, pair, signer);\n  const reserveA = reservesRaw[0];\n  const reserveB = reservesRaw[1];\n\n  const feeOn =\n    (await factory.feeTo()) !== 0x0000000000000000000000000000000000000000;\n\n  const _kLast = await pair.kLast();\n  const kLast = Number(ethers.utils.formatEther(_kLast));\n\n  const _totalSupply = await pair.totalSupply();\n  let totalSupply = Number(ethers.utils.formatEther(_totalSupply));\n\n  let adjustedReserveA = reserveA;\n  let adjustedReserveB = reserveB;\n\n  if (feeOn && kLast > 0) {\n    const feeLiquidity =\n      (totalSupply * (Math.sqrt(reserveA * reserveB) - Math.sqrt(kLast))) /\n      (5 * Math.sqrt(reserveA * reserveB) + Math.sqrt(kLast));\n\n    adjustedReserveA = reserveA - (feeLiquidity * reserveA) / totalSupply;\n    adjustedReserveB = reserveB - (feeLiquidity * reserveB) / totalSupply;\n  }\n\n  const Aout = (adjustedReserveA * liquidity) / totalSupply;\n  const Bout = (adjustedReserveB * liquidity) / totalSupply;\n\n  return [liquidity, Aout / 2, Bout / 2];\n}\n","import React, { useEffect } from \"react\";\nimport { Grid, makeStyles, Paper, Typography } from \"@material-ui/core\";\nimport AccountBalanceIcon from \"@material-ui/icons/AccountBalance\";\nimport { useSnackbar } from \"notistack\";\nimport {\n  getBalanceAndSymbol,\n  getReserves,\n} from \"../ethereumFunctions\";\n\nimport { addLiquidity, quoteAddLiquidity } from \"./LiquidityFunctions\";\n\nimport CoinField from \"../CoinSwapper/CoinField\";\nimport CoinDialog from \"../CoinSwapper/CoinDialog\";\nimport LoadingButton from \"../Components/LoadingButton\";\nimport WrongNetwork from \"../Components/wrongNetwork\";\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(2),\n    paddingBottom: theme.spacing(3),\n    width: \"40%\",\n    overflow: \"wrap\",\n    background: \"linear-gradient(45deg, #00441c 30%, #00682a 90%)\",\n    color: \"white\",\n  },\n  fullWidth: {\n    width: \"100%\",\n  },\n  values: {\n    width: \"50%\",\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  hr: {\n    width: \"100%\",\n  },\n  balance: {\n    padding: theme.spacing(1),\n    overflow: \"wrap\",\n    textAlign: \"center\",\n  },\n  buttonIcon: {\n    marginRight: theme.spacing(1),\n    padding: theme.spacing(0.4),\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction LiquidityDeployer(props) {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n\n  // Stores a record of whether their respective dialog window is open\n  const [dialog1Open, setDialog1Open] = React.useState(false);\n  const [dialog2Open, setDialog2Open] = React.useState(false);\n  const [wrongNetworkOpen, setwrongNetworkOpen] = React.useState(false);\n\n  // Stores data about their respective coin\n  const [coin1, setCoin1] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n  const [coin2, setCoin2] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n\n  // Stores the current reserves in the liquidity pool between coin1 and coin2\n  const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]);\n\n  // Stores the current value of their respective text box\n  const [field1Value, setField1Value] = React.useState(\"\");\n  const [field2Value, setField2Value] = React.useState(\"\");\n\n  // Controls the loading button\n  const [loading, setLoading] = React.useState(false);\n\n  // Stores the user's balance of liquidity tokens for the current pair\n  const [liquidityTokens, setLiquidityTokens] = React.useState(\"\");\n\n  // Used when getting a quote of liquidity\n  const [liquidityOut, setLiquidityOut] = React.useState([0, 0, 0]);\n\n  // Switches the top and bottom coins, this is called when users hit the swap button or select the opposite\n  // token in the dialog (e.g. if coin1 is TokenA and the user selects TokenB when choosing coin2)\n  const switchFields = () => {\n    let oldField1Value = field1Value;\n    let oldField2Value = field2Value;\n\n    setCoin1(coin2);\n    setCoin2(coin1);\n    setField1Value(oldField2Value);\n    setField2Value(oldField1Value);\n    setReserves(reserves.reverse());\n  };\n\n  // These functions take an HTML event, pull the data out and puts it into a state variable.\n  const handleChange = {\n    field1: (e) => {\n      setField1Value(e.target.value);\n    },\n    field2: (e) => {\n      setField2Value(e.target.value);\n    },\n  };\n\n  // Turns the account's balance into something nice and readable\nconst formatBalance = (balance, symbol) => {\n  if (balance !== undefined && symbol) {\n    const formattedBalance = parseFloat(balance).toLocaleString(undefined, { minimumFractionDigits: 3, maximumFractionDigits: 3 });\n    return `${formattedBalance} ${symbol}`;\n  } else {\n    return \"0.0\";\n  }\n};\n\n // Turns the coin's reserves into something nice and readable\nconst formatReserve = (reserve, symbol) => {\n  if (reserve !== undefined && symbol) {\n    const formattedReserve = parseFloat(reserve).toLocaleString(undefined, { minimumFractionDigits: 3, maximumFractionDigits: 3 });\n    return `${formattedReserve} ${symbol}`;\n  } else {\n    return \"0.0\";\n  }\n};\n\n  // Determines whether the button should be enabled or not\n  const isButtonEnabled = () => {\n\n    // If both coins have been selected, and a valid float has been entered for both, which are less than the user's balances, then return true\n    const parsedInput1 = parseFloat(field1Value);\n    const parsedInput2 = parseFloat(field2Value);\n    return (\n      coin1.address &&\n      coin2.address &&\n      parsedInput1 !== NaN &&\n      0 < parsedInput1 &&\n      parsedInput2 !== NaN &&\n      0 < parsedInput2 &&\n      parsedInput1 <= coin1.balance &&\n      parsedInput2 <= coin2.balance\n    );\n  };\n\n\n\n  const deploy = () => {\n    console.log(\"Attempting to deploy liquidity...\");\n    setLoading(true);\n\n    addLiquidity(\n      coin1.address,\n      coin2.address,\n      field1Value,\n      field2Value,\n      '0',\n      '0',\n      props.network.router,\n      props.network.account,\n      props.network.signer\n    )\n      .then(() => {\n        setLoading(false);\n\n        // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\n        setField1Value(\"\");\n        setField2Value(\"\");\n        enqueueSnackbar(\"Deployment Successful\", { variant: \"success\" });\n      })\n      .catch((e) => {\n        setLoading(false);\n        enqueueSnackbar(\"Deployment Failed (\" + e.message + \")\", {\n          variant: \"error\",\n          autoHideDuration: 10000,\n        });\n      });\n  };\n\n  // Called when the dialog window for coin1 exits\n  const onToken1Selected = (address) => {\n    // Close the dialog window\n    setDialog1Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin2.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(\n        props.network.account,\n        address,\n        props.network.provider,\n        props.network.signer,\n        props.network.weth.address,\n        props.network.coins\n        ).then((data) => {\n        setCoin1({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // Called when the dialog window for coin2 exits\n  const onToken2Selected = (address) => {\n    // Close the dialog window\n    setDialog2Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin1.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(props.network.account,\n        address,\n        props.network.provider,\n        props.network.signer,\n        props.network.weth.address,\n        props.network.coins\n        ).then((data) => {\n        setCoin2({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // This hook is called when either of the state variables `coin1.address` or `coin2.address` change.\n  // This means that when the user selects a different coin to convert between, or the coins are swapped,\n  // the new reserves will be calculated.\n  useEffect(() => {\n    console.log(\n      \"Trying to get reserves between:\\n\" + coin1.address + \"\\n\" + coin2.address\n    );\n\n    if (coin1.address && coin2.address && props.network.account) {\n      getReserves(\n        coin1.address,\n        coin2.address,\n        props.network.factory,\n        props.network.signer,\n        props.network.account\n        ).then(\n        (data) => {\n          setReserves([data[0], data[1]]);\n          setLiquidityTokens(data[2]);\n        }\n      );\n    }\n  }, [coin1.address, coin2.address, props.network.account, props.network.factory, props.network.signer]);\n\n  // This hook is called when either of the state variables `field1Value`, `field2Value`, `coin1.address` or `coin2.address` change.\n  // It will give a preview of the liquidity deployment.\n  useEffect(() => {\n    if (isButtonEnabled()) {\n      console.log(\"Trying to preview the liquidity deployment\");\n\n      quoteAddLiquidity(\n        coin1.address,\n        coin2.address,\n        field1Value,\n        field2Value,\n        props.network.factory,\n        props.network.signer\n      ).then((data) => {\n        // console.log(data);\n        console.log(\"TokenA in: \", data[0]);\n        console.log(\"TokenB in: \", data[1]);\n        console.log(\"Liquidity out: \", data[2]);\n        setLiquidityOut([data[0], data[1], data[2]]);\n      });\n    }\n  }, [coin1.address, coin2.address, field1Value, field2Value, props.network.factory, props.network.signer]);\n\n  // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\n  // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\n  useEffect(() => {\n    const coinTimeout = setTimeout(() => {\n      console.log(\"Checking balances & Getting reserves...\");\n\n      if (coin1.address && coin2.address && props.network.account) {\n        getReserves(\n          coin1.address,\n          coin2.address,\n          props.network.factory,\n          props.network.signer,\n          props.network.account\n        ).then((data) => {\n          setReserves([data[0], data[1]]);\n          setLiquidityTokens(data[2]);\n        });\n      }\n\n      if (coin1.address && props.network.account &&!wrongNetworkOpen) {\n        getBalanceAndSymbol(\n          props.network.account,\n          coin1.address,\n          props.network.provider,\n          props.network.signer,\n          props.network.weth.address,\n          props.network.coins\n          ).then(\n          (data) => {\n            setCoin1({\n              ...coin1,\n              balance: data.balance,\n            });\n          }\n        );\n      }\n      if (coin2.address && props.network.account &&!wrongNetworkOpen) {\n        getBalanceAndSymbol(\n          props.network.account,\n          coin2.address,\n          props.network.provider,\n          props.network.signer,\n          props.network.weth.address,\n          props.network.coins\n          ).then(\n          (data) => {\n            setCoin2({\n              ...coin2,\n              balance: data.balance,\n            });\n          }\n        );\n      }\n    }, 10000);\n\n    return () => clearTimeout(coinTimeout);\n  });\n\n  return (\n    <div>\n      {/* Liquidity deployer */}\n      <Typography variant=\"h5\" className={classes.title}></Typography>\n\n      {/* Dialog Windows */}\n      <CoinDialog\n        open={dialog1Open}\n        onClose={onToken1Selected}\n        coins={props.network.coins}\n        signer={props.network.signer}\n      />\n      <CoinDialog\n        open={dialog2Open}\n        onClose={onToken2Selected}\n        coins={props.network.coins}\n        signer={props.networksigner}\n      />\n      <WrongNetwork\n        open={wrongNetworkOpen}\n      />\n\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n        <Grid item xs={12} className={classes.fullWidth}>\n          <CoinField\n            activeField={true}\n            value={field1Value}\n            onClick={() => setDialog1Open(true)}\n            onChange={handleChange.field1}\n            symbol={coin1.symbol !== undefined ? coin1.symbol : \"Select\"}\n          />\n        </Grid>\n\n        <Grid item xs={12} className={classes.fullWidth}>\n          <CoinField\n            activeField={true}\n            value={field2Value}\n            onClick={() => setDialog2Open(true)}\n            onChange={handleChange.field2}\n            symbol={coin2.symbol !== undefined ? coin2.symbol : \"Select\"}\n          />\n        </Grid>\n      </Grid>\n\n      <Grid\n        container\n        direction=\"row\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        spacing={4}\n        className={classes.balance}\n      >\n        <hr className={classes.hr} />\n        <Grid\n          container\n          item\n          className={classes.values}\n          direction=\"column\"\n          alignItems=\"center\"\n          spacing={2}\n        >\n          {/* Balance Display */}\n          <Typography variant=\"h6\">Your Balances</Typography>\n          <Grid container direction=\"row\" justifyContent=\"space-between\">\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatBalance(coin1.balance, coin1.symbol)}\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatBalance(coin2.balance, coin2.symbol)}\n              </Typography>\n            </Grid>\n          </Grid>\n\n          <hr className={classes.hr} />\n\n          {/* Reserves Display */}\n          <Typography variant=\"h6\">Reserves</Typography>\n          <Grid container direction=\"row\" justifyContent=\"space-between\">\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatReserve(reserves[0], coin1.symbol)}\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatReserve(reserves[1], coin2.symbol)}\n              </Typography>\n            </Grid>\n          </Grid>\n\n          <hr className={classes.hr} />\n\n          {/* Liquidity Tokens Display */}\n          <Typography variant=\"h6\">Your Liquidity Pool Tokens</Typography>\n          <Grid container direction=\"row\" justifyContent=\"center\">\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatReserve(liquidityTokens, \"DexTop LP\")}\n              </Typography>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Paper className={classes.paperContainer}>\n          {/*Red  Display to show the quote */}\n          <Grid\n            container\n            item\n            direction=\"column\"\n            alignItems=\"center\"\n            spacing={2}\n            className={classes.fullWidth}\n          >\n            {/* Tokens in */}\n            <Typography variant=\"h6\">Tokens in</Typography>\n            <Grid container direction=\"row\" justifyContent=\"space-between\">\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(liquidityOut[0], coin1.symbol)}\n                </Typography>\n              </Grid>\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(liquidityOut[1], coin2.symbol)}\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <hr className={classes.hr} />\n\n            {/* Liquidity Tokens Display */}\n            <Typography variant=\"h6\">Liquidity Pool Tokens Out</Typography>\n            <Grid container direction=\"row\" justifyContent=\"center\">\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatReserve(liquidityOut[2], \"DexTop LP\")}\n                </Typography>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Paper>\n\n        <hr className={classes.hr} />\n      </Grid>\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n        <LoadingButton\n          loading={loading}\n          valid={isButtonEnabled()}\n          success={false}\n          fail={false}\n          onClick={deploy}\n        >\n          <AccountBalanceIcon className={classes.buttonIcon} />\n          Deploy\n        </LoadingButton>\n      </Grid>\n    </div>\n  );\n}\n\nexport default LiquidityDeployer;\n","import React, { useEffect } from \"react\";\nimport { Grid, makeStyles, Paper, Typography } from \"@material-ui/core\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\nimport { useSnackbar } from \"notistack\";\nimport {\n  getBalanceAndSymbol,\n  getReserves,\n} from \"../ethereumFunctions\";\nimport { removeLiquidity, quoteRemoveLiquidity } from \"./LiquidityFunctions\";\nimport {\n  RemoveLiquidityField1,\n  RemoveLiquidityField2,\n} from \"../CoinSwapper/CoinField\";\nimport CoinDialog from \"../CoinSwapper/CoinDialog\";\nimport LoadingButton from \"../Components/LoadingButton\";\nimport WrongNetwork from \"../Components/wrongNetwork\";\nimport * as COLORS from \"@material-ui/core/colors\";\n\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(2),\n    paddingBottom: theme.spacing(3),\n    width: \"40%\",\n    overflow: \"wrap\",\n    background: \"linear-gradient(45deg, #00441c 30%, #00682a 90%)\",\n    color: \"white\",\n  },\n  fullWidth: {\n    width: \"100%\",\n  },\n  values: {\n    width: \"50%\",\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  hr: {\n    width: \"100%\",\n  },\n  balance: {\n    padding: theme.spacing(1),\n    overflow: \"wrap\",\n    textAlign: \"center\",\n  },\n  buttonIcon: {\n    marginRight: theme.spacing(1),\n    padding: theme.spacing(0.4),\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction LiquidityRemover(props) {\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n\n  // Stores a record of whether their respective dialog window is open\n  const [dialog1Open, setDialog1Open] = React.useState(false);\n  const [dialog2Open, setDialog2Open] = React.useState(false);\n  const [wrongNetworkOpen, setwrongNetworkOpen] = React.useState(false);\n\n\n  // Stores data about their respective coin\n  const [coin1, setCoin1] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n  const [coin2, setCoin2] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined,\n  });\n\n  // Stores the current reserves in the liquidity pool between coin1 and coin2\n  const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]);\n\n  // Stores the current value of their respective text box\n  const [field1Value, setField1Value] = React.useState(\"\");\n\n  // Controls the loading button\n  const [loading, setLoading] = React.useState(false);\n\n  // Stores the liquidity tokens balance of the user\n  const [liquidityTokens, setLiquidityTokens] = React.useState(\"\");\n\n  // Stores the input and output for the liquidity removal preview\n  const [tokensOut, setTokensOut] = React.useState([0, 0, 0]);\n\n  // Switches the top and bottom coins, this is called when users hit the swap button or select the opposite\n  // token in the dialog (e.g. if coin1 is TokenA and the user selects TokenB when choosing coin2)\n  const switchFields = () => {\n    setCoin1(coin2);\n    setCoin2(coin1);\n    setReserves(reserves.reverse());\n  };\n\n  // These functions take an HTML event, pull the data out and puts it into a state variable.\n  const handleChange = {\n    field1: (e) => {\n      setField1Value(e.target.value);\n    },\n  };\n\n  // Turns the account's balance into something nice and readable\nconst formatBalance = (balance, symbol) => {\n  if (balance !== undefined && symbol) {\n    const formattedBalance = parseFloat(balance).toLocaleString(undefined, { minimumFractionDigits: 3, maximumFractionDigits: 3 });\n    return `${formattedBalance} ${symbol}`;\n  } else {\n    return \"0.0\";\n  }\n};\n\n // Turns the coin's reserves into something nice and readable\nconst formatReserve = (reserve, symbol) => {\n  if (reserve !== undefined && symbol) {\n    const formattedReserve = parseFloat(reserve).toLocaleString(undefined, { minimumFractionDigits: 3, maximumFractionDigits: 3 });\n    return `${formattedReserve} ${symbol}`;\n  } else {\n    return \"0.0\";\n  }\n};\n\n  // Determines whether the button should be enabled or not\n  const isButtonEnabled = () => {\n\n    // If both coins have been selected, and a valid float has been entered for both, which are less than the user's balances, then return true\n    const parsedInput = parseFloat(field1Value);\n    return (\n      coin1.address &&\n      coin2.address &&\n      parsedInput !== NaN &&\n      0 < parsedInput &&\n      parsedInput <= liquidityTokens\n    );\n  };\n\n  const remove = () => {\n    console.log(\"Attempting to remove liquidity...\");\n    setLoading(true);\n\n    removeLiquidity(\n      coin1.address,\n      coin2.address,\n      field1Value,\n      0,\n      0,\n      props.network.router,\n      props.network.account,\n      props.network.signer,\n      props.network.factory\n    )\n      .then(() => {\n        setLoading(false);\n\n        // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\n        setField1Value(\"\");\n        enqueueSnackbar(\"Removal Successful\", { variant: \"success\" });\n      })\n      .catch((e) => {\n        setLoading(false);\n        enqueueSnackbar(\"Deployment Failed (\" + e.message + \")\", {\n          variant: \"error\",\n          autoHideDuration: 7000,\n        });\n      });\n  };\n\n  // Called when the dialog window for coin1 exits\n  const onToken1Selected = (address) => {\n    // Close the dialog window\n    setDialog1Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin2.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(\n        props.network.account,\n        address,\n        props.network.provider,\n        props.network.signer,\n        props.network.weth.address,\n        props.network.coins\n        ).then((data) => {\n        setCoin1({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // Called when the dialog window for coin2 exits\n  const onToken2Selected = (address) => {\n    // Close the dialog window\n    setDialog2Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin1.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(props.network.account,\n        address,\n        props.network.provider,\n        props.network.signer,\n        props.network.weth.address,\n        props.network.coins\n        ).then((data) => {\n        setCoin2({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance,\n        });\n      });\n    }\n  };\n\n  // This hook is called when either of the state variables `coin1.address` or `coin2.address` change.\n  // This means that when the user selects a different coin to convert between, or the coins are swapped,\n  // the new reserves will be calculated.\n  useEffect(() => {\n    console.log(\n      \"Trying to get reserves between:\\n\" + coin1.address + \"\\n\" + coin2.address\n    );\n\n    if (coin1.address && coin2.address && props.network.account) {\n      getReserves(\n        coin1.address,\n        coin2.address,\n        props.network.factory,\n        props.network.signer,\n        props.network.account).then(\n        (data) => {\n          setReserves([data[0], data[1]]);\n          setLiquidityTokens(data[2]);\n        }\n      );\n    }\n  }, [coin1.address, coin2.address, props.network.account, props.network.factory, props.network.signer]);\n\n  \n  // This hook is called when either of the state variables `field1Value`, `coin1.address` or `coin2.address` change.\n  // It will give a preview of the liquidity removal.\n  useEffect(() => {\n    if (isButtonEnabled()) {\n      console.log(\"Trying to preview the liquidity removal\");\n      quoteRemoveLiquidity(\n        coin1.address,\n        coin2.address,\n        field1Value,\n        props.network.factory,\n        props.network.signer\n      ).then((data) => {\n        setTokensOut(data);\n      });\n    }\n  }, [coin1.address, coin2.address, field1Value, props.network.factory, props.network.signer]);\n\n  useEffect(() => {\n    // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\n    // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\n\n    const coinTimeout = setTimeout(() => {\n      console.log(\"Checking balances & Getting reserves...\");\n\n      if (coin1.address && coin2.address && props.network.account) {\n        getReserves(\n          coin1.address,\n          coin2.address,\n          props.network.factory,\n          props.network.signer,\n          props.network.account\n        ).then((data) => {\n          setReserves([data[0], data[1]]);\n          setLiquidityTokens(data[2]);\n        });\n      }\n\n      if (coin1.address && props.network.account &&!wrongNetworkOpen) {\n        getBalanceAndSymbol(\n          props.network.account,\n          coin1.address, props.network.provider,\n          props.network.signer,\n          props.network.weth.address,\n          props.network.coins\n          ).then(\n          (data) => {\n            setCoin1({\n              ...coin1,\n              balance: data.balance,\n            });\n          }\n        );\n      }\n      if (coin2.address && props.network.account &&!wrongNetworkOpen) {\n        getBalanceAndSymbol(props.network.account,\n          coin2.address,\n          props.network.provider,\n          props.network.signer,\n          props.network.weth.address,\n          props.network.coins\n          ).then(\n          (data) => {\n            setCoin2({\n              ...coin2,\n              balance: data.balance,\n            });\n          }\n        );\n      }\n    }, 10000);\n\n    return () => clearTimeout(coinTimeout);\n  });\n\n  return (\n    <div>\n      {/* Coin Swapper */}\n      <Typography variant=\"h5\" className={classes.title}></Typography>\n\n      {/* Dialog Windows */}\n      <CoinDialog\n        open={dialog1Open}\n        onClose={onToken1Selected}\n        coins={props.network.coins}\n        signer={props.network.signer}\n      />\n      <CoinDialog\n        open={dialog2Open}\n        onClose={onToken2Selected}\n        coins={props.network.coins}\n        signer={props.network.signer}\n      />\n      <WrongNetwork\n        open={wrongNetworkOpen}\n      />\n\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n        <Grid item xs={12} className={classes.fullWidth}>\n          <RemoveLiquidityField1\n            activeField={true}\n            value={field1Value}\n            onClick={() => setDialog1Open(true)}\n            onChange={handleChange.field1}\n            symbol={coin1.symbol !== undefined ? coin1.symbol : \"Select\"}\n          />\n        </Grid>\n\n        <Grid item xs={12} className={classes.fullWidth}>\n          <RemoveLiquidityField2\n            activeField={true}\n            onClick={() => setDialog2Open(true)}\n            symbol={coin2.symbol !== undefined ? coin2.symbol : \"Select\"}\n          />\n        </Grid>\n      </Grid>\n\n      <Grid\n        container\n        direction=\"row\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        spacing={4}\n        className={classes.balance}\n      >\n        <hr className={classes.hr} />\n        <Grid\n          container\n          item\n          className={classes.values}\n          direction=\"column\"\n          alignItems=\"center\"\n          spacing={2}\n        >\n          {/* Balance Display */}\n          <Typography variant=\"h6\">Your Balances</Typography>\n          <Grid container direction=\"row\" justifyContent=\"space-between\">\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatBalance(coin1.balance, coin1.symbol)}\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatBalance(coin2.balance, coin2.symbol)}\n              </Typography>\n            </Grid>\n          </Grid>\n\n          <hr className={classes.hr} />\n\n          {/* Reserves Display */}\n          <Typography variant=\"h6\">Reserves</Typography>\n          <Grid container direction=\"row\" justifyContent=\"space-between\">\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatReserve(reserves[0], coin1.symbol)}\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatReserve(reserves[1], coin2.symbol)}\n              </Typography>\n            </Grid>\n          </Grid>\n\n          <hr className={classes.hr} />\n\n          {/* Liquidity Tokens Display */}\n          <Typography variant=\"h6\">Your Liquidity Pool Tokens</Typography>\n          <Grid container direction=\"row\" justifyContent=\"center\">\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" className={classes.balance}>\n                {formatReserve(liquidityTokens, \"DexTop LP\")}\n              </Typography>\n            </Grid>\n          </Grid>\n        </Grid>\n\n        <Paper className={classes.paperContainer}>\n          {/*Red  Display to show the quote */}\n          <Grid\n            container\n            item\n            direction=\"column\"\n            alignItems=\"center\"\n            spacing={2}\n            className={classes.fullWidth}\n          >\n            {/* Tokens in */}\n            <Typography variant=\"h6\">Liquidity Pool Tokens in</Typography>\n            <Grid container direction=\"row\" justifyContent=\"center\">\n              <Grid item xs={6}>\n                <Typography variant=\"body1\" className={classes.balance}>\n                  {formatBalance(tokensOut[0], \"DexTop LP\")}\n                </Typography>\n              </Grid>\n            </Grid>\n\n            <hr className={classes.hr} />\n\n            {/* Liquidity Tokens Display */}\n            \n          \n<Typography variant=\"h6\">Tokens Out</Typography>\n<Grid container direction=\"row\" justifyContent=\"space-between\">\n  <Grid item xs={6}>\n    <Typography variant=\"body1\" className={classes.balance}>\n      {Number(tokensOut[1]).toLocaleString(undefined, { minimumFractionDigits: 3, maximumFractionDigits: 3 })} {coin1.symbol}\n    </Typography>\n  </Grid>\n  <Grid item xs={6}>\n    <Typography variant=\"body1\" className={classes.balance}>\n      {Number(tokensOut[2]).toLocaleString(undefined, { minimumFractionDigits: 3, maximumFractionDigits: 3 })} {coin2.symbol}\n    </Typography>\n  </Grid>\n</Grid>\n           \n          </Grid>\n        </Paper>\n        <hr className={classes.hr} />\n      </Grid>\n\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\n        <LoadingButton\n          loading={loading}\n          valid={isButtonEnabled()}\n          success={false}\n          fail={false}\n          onClick={remove}\n        >\n          <ArrowDownwardIcon className={classes.buttonIcon} />\n          Remove\n        </LoadingButton>\n      </Grid>\n    </div>\n  );\n}\n\nexport default LiquidityRemover;\n","import React from \"react\";\nimport {\n  Container,\n  Grid,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\n\nimport SwitchButton from \"./SwitchButton\";\nimport LiquidityDeployer from \"./LiquidityDeployer\";\nimport LiquidityRemover from \"./RemoveLiquidity\";\nimport * as COLORS from \"@material-ui/core/colors\";\n\nconst styles = (theme) => ({\n  paperContainer: {\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(1),\n    paddingBottom: theme.spacing(3),\n    maxWidth: 700,\n    margin: \"auto\",\n    backgroundColor: \"rgba(37, 44, 69, 0.9)\",\n    color: COLORS.green[200],\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1),\n  },\n  footer: {\n    marginTop: \"155px\",\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nfunction Liquidity(props) {\n  const classes = useStyles();\n\n  const [deploy, setDeploy] = React.useState(true);\n\n  const deploy_or_remove = (deploy) => {\n    if (deploy === true) {\n      return <LiquidityDeployer network={props.network}/>;\n    }\n    return <LiquidityRemover network={props.network}/>;\n  };\n\n  return (\n    <div>\n      <Container>\n        <Paper className={classes.paperContainer}>\n          <Typography variant=\"h5\" className={classes.title}>\n            <SwitchButton setDeploy={setDeploy} />\n          </Typography>\n\n          {deploy_or_remove(deploy)}\n        </Paper>\n      </Container>\n\n      <Grid\n        container\n        className={classes.footer}\n        direction=\"row\"\n        justifyContent=\"center\"\n        alignItems=\"flex-end\"\n      >\n        <p>\n         DexTop{\" \"}\n          <a href=\"https://dextop.pro/\">here</a>\n        </p>\n      </Grid>\n    </div>\n  );\n}\n\nexport default Liquidity;\n","import React from \"react\";\nimport \"./App.css\";\nimport { ethers } from \"ethers\";\nimport Web3Provider from \"./network\";\nimport NarBar from \"./NavBar/NavBar\";\nimport CoinSwapper from \"./CoinSwapper/CoinSwapper\";\nimport { Route } from \"react-router-dom\";\nimport { SnackbarProvider } from \"notistack\";\nimport Liquidity from \"./Liquidity/Liquidity\";\nimport { createTheme, ThemeProvider } from \"@material-ui/core\";\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: \"#008938\",\n      contrastText: \"#000\",\n    },\n    secondary: {\n      main: \"#9e9e9e\",\n      contrastText: \"#000\",\n    },\n  },\n});\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <SnackbarProvider maxSnack={3}>\n        <ThemeProvider theme={theme}>\n          <Web3Provider\n            render={(network) => (\n              <div>\n                <NarBar />\n                <Route exact path=\"/\">\n                  <CoinSwapper network={network} />\n                </Route>\n\n                <Route exact path=\"/liquidity\">\n                  <Liquidity network={network} />\n                </Route>\n              </div>\n            )}\n          ></Web3Provider>\n        </ThemeProvider>\n      </SnackbarProvider>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { HashRouter } from \"react-router-dom\"; // Change BrowserRouter to HashRouter\n\nReactDOM.render(\n  <HashRouter> {/* Change BrowserRouter to HashRouter */}\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </HashRouter>,\n  document.getElementById(\"root2\")\n);\n\nreportWebVitals();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}